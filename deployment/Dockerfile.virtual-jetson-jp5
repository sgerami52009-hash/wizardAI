# Virtual Jetson Nano Orin JetPack 5.x Environment
# Simulates JetPack 5.1 with CUDA 11.4 and TensorRT 8.5

FROM ubuntu:20.04

# Prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# JetPack 5 environment simulation
ENV JETPACK_VERSION=5.1
ENV CUDA_VERSION=11.4
ENV TENSORRT_VERSION=8.5
ENV UBUNTU_VERSION=20.04
ENV L4T_VERSION=35.4.1
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=all

# Simulate Jetson hardware info
RUN mkdir -p /etc && echo "# R35 (release), REVISION: 4.1, GCID: 33958178, BOARD: t186ref, EABI: aarch64, DATE: Fri Oct 14 19:21:17 UTC 2022" > /etc/nv_tegra_release

# Install system dependencies matching JetPack 5
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    cmake \
    pkg-config \
    libasound2-dev \
    libpulse-dev \
    libsndfile1-dev \
    libfftw3-dev \
    libopenblas-dev \
    python3 \
    python3-pip \
    ffmpeg \
    sox \
    portaudio19-dev \
    libportaudio2 \
    libjack-jackd2-dev \
    software-properties-common \
    ca-certificates \
    gnupg \
    lsb-release \
    htop \
    nano \
    vim \
    net-tools \
    iputils-ping \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 18 LTS (JetPack 5 compatible)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Install Python packages matching JetPack 5 versions
RUN pip3 install --no-cache-dir \
    numpy==1.21.6 \
    scipy==1.7.3 \
    soundfile==0.10.3 \
    librosa==0.9.2

# Simulate NVIDIA tools (mock versions for testing)
RUN mkdir -p /usr/bin && \
    echo '#!/bin/bash\necho "NVIDIA-SMI 470.161.03    Driver Version: 470.161.03    CUDA Version: 11.4"\necho "GPU 0: Orin (UUID: GPU-12345678-1234-1234-1234-123456789012)"\necho "| N/A   42C    P0    15W / 50W |      0MiB /  7850MiB |      0%      Default |"' > /usr/bin/nvidia-smi && \
    chmod +x /usr/bin/nvidia-smi

# Simulate CUDA installation
RUN mkdir -p /usr/local/cuda/bin && \
    echo '#!/bin/bash\necho "nvcc: NVIDIA (R) Cuda compiler driver"\necho "Copyright (c) 2005-2022 NVIDIA Corporation"\necho "Built on Wed_Sep_21_10:33:58_PDT_2022"\necho "Cuda compilation tools, release 11.4, V11.4.315"' > /usr/local/cuda/bin/nvcc && \
    chmod +x /usr/local/cuda/bin/nvcc && \
    echo "CUDA Version 11.4.315" > /usr/local/cuda/version.txt

# Add CUDA to PATH
ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Create jetson user matching typical setup
RUN useradd -m -s /bin/bash -G sudo jetson && \
    echo "jetson:jetson" | chpasswd && \
    echo "jetson ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Install Docker (simulated for virtual environment)
RUN curl -fsSL https://get.docker.com -o get-docker.sh && \
    sh get-docker.sh && \
    usermod -aG docker jetson && \
    rm get-docker.sh

# Install Docker Compose
RUN curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && \
    chmod +x /usr/local/bin/docker-compose && \
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

# Create typical Jetson directories
RUN mkdir -p /home/jetson/home-assistant && \
    chown -R jetson:jetson /home/jetson

# Simulate audio devices
RUN mkdir -p /dev/snd && \
    touch /dev/snd/controlC0 /dev/snd/pcmC0D0p /dev/snd/pcmC0D0c && \
    chmod 666 /dev/snd/*

# Create system info scripts
RUN echo '#!/bin/bash\necho "Architecture: aarch64"\necho "Model: NVIDIA Jetson Orin Nano Developer Kit"\necho "Serial Number: 1421823044981"\necho "L4T: 35.4.1"\necho "JetPack: 5.1.2"' > /usr/bin/jetson_release && \
    chmod +x /usr/bin/jetson_release

# Simulate memory info (8GB Jetson Orin Nano)
RUN echo '#!/bin/bash\necho "              total        used        free      shared  buff/cache   available"\necho "Mem:           7850        1200        5500         100        1150        6400"\necho "Swap:          4096           0        4096"' > /usr/bin/free && \
    chmod +x /usr/bin/free

# Set working directory
WORKDIR /home/jetson

# Switch to jetson user
USER jetson

# Expose typical ports
EXPOSE 22 3000 8080

# Start SSH and keep container running
CMD ["bash", "-c", "sudo service ssh start && tail -f /dev/null"]