name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Child Safety Compliance Tests
  safety-tests:
    name: Child Safety Compliance
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run safety audit
      run: npm run safety-audit
      
    - name: Run child safety compliance tests
      run: npm run test:safety
      
    - name: Validate content filters
      run: npm run test:content-filter
      
    - name: Check parental controls
      run: npm run test:parental-controls

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Performance Testing (Jetson Simulation)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Memory usage test
      run: npm run test:memory
      
    - name: Latency benchmarks
      run: npm run test:latency
      
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, safety-tests, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r dist/ deployment-package/
        cp -r config/ deployment-package/
        cp -r deployment/ deployment-package/
        cp package*.json deployment-package/
        tar -czf jetson-home-assistant-${{ github.sha }}.tar.gz deployment-package/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          jetson-home-assistant-${{ github.sha }}.tar.gz
          dist/
        retention-days: 30

  # Docker Build for Jetson
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile.jetson
        platforms: linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation Deployment
  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build documentation
      run: npm run docs:build
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs-build

  # Release Deployment
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker-build, performance]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: Download performance results
      uses: actions/download-artifact@v3
      with:
        name: performance-results
        path: performance-results/
        
    - name: Create USB installer
      run: |
        # Create USB installer package
        mkdir -p usb-installer
        tar -xzf jetson-home-assistant-${{ github.sha }}.tar.gz -C usb-installer/
        cd usb-installer && zip -r ../jetson-home-assistant-usb-installer.zip .
        
    - name: Generate release notes
      run: |
        echo "## üöÄ Jetson Home Assistant Release ${{ github.event.release.tag_name }}" > release-notes.md
        echo "" >> release-notes.md
        echo "### üì¶ Installation Options" >> release-notes.md
        echo "- **Network Deployment**: Use \`deploy-jetson.sh\`" >> release-notes.md
        echo "- **USB Installation**: Download USB installer package" >> release-notes.md
        echo "- **Docker**: \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "### üõ°Ô∏è Safety & Security" >> release-notes.md
        echo "- ‚úÖ Child safety compliance verified" >> release-notes.md
        echo "- ‚úÖ Security scan passed" >> release-notes.md
        echo "- ‚úÖ Performance benchmarks met" >> release-notes.md
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          jetson-home-assistant-${{ github.sha }}.tar.gz
          jetson-home-assistant-usb-installer.zip
          performance-results/*
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.event.release.tag_name, 'beta') || contains(github.event.release.tag_name, 'alpha') }}

  # Notification
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, safety-tests, security, performance, build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.safety-tests.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "‚úÖ All checks passed! Ready for deployment."
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.safety-tests.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed. Please review the results."
        exit 1